generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id         Int        @id @default(autoincrement())
  email      String?    @unique @db.VarChar(255)
  phone      String?    @unique @db.VarChar(64)
  host_email String[]   @unique @db.VarChar(255)
  host_phone String[]   @unique @db.VarChar(255)
  hash       String     @db.VarChar(255)
  created    DateTime?  @default(now()) @db.Timestamp(6)
  updated    DateTime?  @default(now()) @db.Timestamp(6)
  seen       DateTime?  @default(now()) @db.Timestamp(6)
  delete_by  DateTime?  @default(dbgenerated("(now() + '30 days'::interval)")) @db.Timestamp(6)
  about      String?    @db.VarChar(255)
  widget     Json?
  is_host    Boolean?   @default(false)
  party      party[]
  settings   settings[]
}

model party {
  id            Int       @id @default(autoincrement())
  party_name    String?   @db.VarChar(255)
  host_id       Int?
  chat_id       String?   @db.VarChar(255)
  host_email    String?   @db.VarChar(255)
  host_phone    String?   @db.VarChar(64)
  time_start    DateTime? @db.Timestamp(6)
  time_end      DateTime? @db.Timestamp(6)
  banner_image  String?   @db.VarChar(255)
  state         String?   @db.VarChar(255)
  city          String?   @db.VarChar(255)
  zip           String?   @db.VarChar(255)
  street_number String?   @db.VarChar(255)
  street        String?   @db.VarChar(255)
  unit          String?   @db.VarChar(255)
  longitude     Float?
  latitude      Float?
  plus_code     String?   @db.VarChar(255)
  widgets       Json?
  guests        Json?
  account       account?  @relation(fields: [host_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id     Int       @id @default(autoincrement())
  token  String?   @unique @db.VarChar(255)
  expiry DateTime? @db.Timestamp(6)
  client Boolean?  @default(true)
}

model settings {
  id      Int      @id @default(autoincrement())
  user_id Int?
  account account? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum property {
  residential
  commercial
}
