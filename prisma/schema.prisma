generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique @db.VarChar(255)
  phone      String?      @unique @db.VarChar(64)
  hash       String
  about      String?
  created    DateTime     @default(now()) @db.Timestamp(6)
  updated    DateTime     @default(now()) @db.Timestamp(6)
  seen       DateTime     @default(now()) @db.Timestamp(6)
  delete_by  DateTime?    @default(dbgenerated("(now() + '30 days'::interval)")) @db.Timestamp(6)
  attendance attendance[]
  party      party[]
  profile    profile?
  session    session[]
  setting    setting?
}

model party {
  id          Int          @id @default(autoincrement())
  party_name  String
  banner      String?      @db.VarChar(255)
  host        Int
  chat_id     String?
  created     DateTime     @default(now()) @db.Timestamp(6)
  time_start  DateTime     @db.Timestamp(6)
  time_end    DateTime?    @db.Timestamp(6)
  is_waitlist Boolean      @default(false)
  party_size  Int?
  price       Int          @default(0)
  is_private  Boolean      @default(false)
  is_deleted  Boolean      @default(false)
  widgets     Json?
  state       String
  city        String
  zip         String
  street      String
  unit        String?
  longitude   Float        @db.Real
  latitude    Float        @db.Real
  attendance  attendance[]
  account     account      @relation(fields: [host], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  session_id Int
  token      String   @id
  expiry     DateTime @db.Timestamp(6)
  account    account  @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model attendance {
  party_id Int
  guest_id Int
  seen     DateTime? @db.Timestamp(6)
  rsvp     rsvp      @default(yes)
  paid     Float     @default(0) @db.Real
  qr_code  String?
  account  account   @relation(fields: [guest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  party    party     @relation(fields: [party_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([party_id, guest_id])
}

model profile {
  profile_id Int     @id
  about      String?
  twitter    String? @db.VarChar(255)
  facebook   String? @db.VarChar(255)
  instagram  String? @db.VarChar(255)
  website    String? @db.VarChar(255)
  account    account @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model setting {
  setting_id Int     @id
  is_host    Boolean @default(false)
  account    account @relation(fields: [setting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum rsvp {
  yes
  no
  maybe
  waitlist
}
