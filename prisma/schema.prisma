generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                               Int          @id @default(autoincrement())
  name                             String
  email                            String       @unique @db.VarChar(255)
  phone                            String?      @unique @db.VarChar(64)
  host_id                          String       @unique
  host_email                       String?      @unique @db.VarChar(255)
  host_phone                       String?      @unique @db.VarChar(64)
  hash                             String
  about                            String?
  is_host                          Boolean      @default(false)
  created                          DateTime     @default(now()) @db.Timestamp(6)
  updated                          DateTime     @default(now()) @db.Timestamp(6)
  seen                             DateTime     @default(now()) @db.Timestamp(6)
  delete_by                        DateTime?    @default(dbgenerated("(CURRENT_TIMESTAMP + '30 days'::interval)")) @db.Timestamp(6)
  attendance                       attendance[]
  party                            party[]
  session_session_accountToaccount session[]    @relation("session_accountToaccount")
  settings                         settings[]
}

model party {
  id                                 Int          @id @default(autoincrement())
  party_name                         String       @db.VarChar(255)
  banner_image                       String?      @db.VarChar(255)
  host_id                            Int
  chat_id                            String?      @db.VarChar(255)
  host_email                         String?      @db.VarChar(255)
  host_phone                         String?      @db.VarChar(64)
  time_start                         DateTime     @db.Timestamp(6)
  time_end                           DateTime?    @db.Timestamp(6)
  is_waitlist                        Boolean      @default(false)
  party_size                         Int          @default(10)
  price                              Int          @default(0)
  is_private                         Boolean      @default(false)
  state                              String       @db.VarChar(255)
  city                               String       @db.VarChar(255)
  zip                                String       @db.VarChar(255)
  street_number                      String       @db.VarChar(255)
  street                             String       @db.VarChar(255)
  unit                               String       @db.VarChar(255)
  longitude                          Float        @db.Real
  latitude                           Float        @db.Real
  plus_code                          String?      @db.VarChar(255)
  widgets                            Json?
  attendance_attendance_partyToparty attendance[] @relation("attendance_partyToparty")
  account                            account      @relation(fields: [host_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  account                          Int
  token                            String   @id @db.VarChar(255)
  expiry                           DateTime @db.Timestamp(6)
  account_session_accountToaccount account  @relation("session_accountToaccount", fields: [account], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model settings {
  id      Int      @id @default(autoincrement())
  guest   Int?
  account account? @relation(fields: [guest], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model attendance {
  guest                         Int
  party                         Int
  seen                          DateTime? @db.Timestamp(6)
  rsvp                          rsvp      @default(attending)
  account                       account   @relation(fields: [guest], references: [id], onDelete: NoAction, onUpdate: NoAction)
  party_attendance_partyToparty party     @relation("attendance_partyToparty", fields: [party], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([guest, party])
}

enum rsvp {
  attending
  waitlist
}
